{"ast":null,"code":"var _jsxFileName = \"/home/arihant/Documents/Chess-Online-Frontend/src/connection/videochat.js\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport Peer from \"simple-peer\";\nimport styled from \"styled-components\";\n\nconst socket = require('../connection/socket').socket;\n\nconst Container = styled.div`\n  height: 50vh;\n  width: 100%;\n  flex-direction: column;\n`;\nconst Row = styled.div`\n  width: 100%;\n`;\nconst Video = styled.video`\n  border: 1px solid blue;\n`;\n\nfunction VideoChatApp(props) {\n  /**\n   * initial state: both player is neutral and have the option to call each other\n   * \n   * player 1 calls player 2: Player 1 should display: 'Calling {player 2 username},' and the \n   *                          'CallPeer' button should disappear for Player 1.\n   *                          Player 2 should display '{player 1 username} is calling you' and\n   *                          the 'CallPeer' button for Player 2 should also disappear. \n   * \n   * Case 1: player 2 accepts call - the video chat begins and there is no button to end it.\n   * \n   * Case 2: player 2 ignores player 1 call - nothing happens. Wait until the connection times out. \n   * \n   */\n  const [stream, setStream] = useState();\n  const [receivingCall, setReceivingCall] = useState(false);\n  const [caller, setCaller] = useState(\"\");\n  const [callerSignal, setCallerSignal] = useState();\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [isCalling, setIsCalling] = useState(false);\n  const userVideo = useRef();\n  const partnerVideo = useRef(); // iceServer with STUN and TURN Config\n\n  const server = [{\n    urls: 'stun:stun.l.google.com:19302'\n  }, {\n    urls: 'stun:global.stun.twilio.com:3478?transport=udp'\n  }, {\n    urls: 'turn:numb.viagenie.ca',\n    username: \"pasaseh@ether123.net\",\n    credential: \"12345678\"\n  }];\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      setStream(stream);\n\n      if (userVideo.current) {\n        userVideo.current.srcObject = stream;\n      }\n    });\n    socket.on(\"hey\", data => {\n      setReceivingCall(true);\n      setCaller(data.from);\n      setCallerSignal(data.signal);\n    });\n  }, []);\n\n  function callPeer(id) {\n    setIsCalling(true);\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream: stream\n    });\n    peer.on(\"signal\", data => {\n      socket.emit(\"callUser\", {\n        userToCall: id,\n        signalData: data,\n        from: props.mySocketId\n      });\n    });\n    peer.on(\"stream\", stream => {\n      if (partnerVideo.current) {\n        partnerVideo.current.srcObject = stream;\n      }\n    });\n    socket.on(\"callAccepted\", signal => {\n      setCallAccepted(true);\n      peer.signal(signal);\n    });\n  }\n\n  function acceptCall() {\n    setCallAccepted(true);\n    setIsCalling(false);\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream: stream\n    });\n    peer.on(\"signal\", data => {\n      socket.emit(\"acceptCall\", {\n        signal: data,\n        to: caller\n      });\n    });\n    peer.on(\"stream\", stream => {\n      partnerVideo.current.srcObject = stream;\n    });\n    peer.signal(callerSignal);\n  }\n\n  let UserVideo;\n\n  if (stream) {\n    UserVideo = /*#__PURE__*/React.createElement(Video, {\n      playsInline: true,\n      muted: true,\n      ref: userVideo,\n      autoPlay: true,\n      style: {\n        width: \"50%\",\n        height: \"50%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 7\n      }\n    });\n  }\n\n  let mainView;\n\n  if (callAccepted) {\n    mainView = /*#__PURE__*/React.createElement(Video, {\n      playsInline: true,\n      ref: partnerVideo,\n      autoPlay: true,\n      style: {\n        width: \"50%\",\n        height: \"50%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 7\n      }\n    });\n  } else if (receivingCall) {\n    mainView = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }\n    }, props.opponentUserName, \" is calling you\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: acceptCall,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 38\n      }\n    }, \"Accept\")));\n  } else if (isCalling) {\n    mainView = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }\n    }, \"Currently calling \", props.opponentUserName, \"...\"));\n  } else {\n    mainView = /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => {\n        callPeer(props.opponentSocketId);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 10\n      }\n    }, \"Chat with your friend while you play!\"));\n  }\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }, mainView, UserVideo));\n}\n\nexport default VideoChatApp;","map":{"version":3,"sources":["/home/arihant/Documents/Chess-Online-Frontend/src/connection/videochat.js"],"names":["React","useEffect","useState","useRef","Peer","styled","socket","require","Container","div","Row","Video","video","VideoChatApp","props","stream","setStream","receivingCall","setReceivingCall","caller","setCaller","callerSignal","setCallerSignal","callAccepted","setCallAccepted","isCalling","setIsCalling","userVideo","partnerVideo","server","urls","username","credential","navigator","mediaDevices","getUserMedia","audio","then","current","srcObject","on","data","from","signal","callPeer","id","peer","initiator","trickle","emit","userToCall","signalData","mySocketId","acceptCall","to","UserVideo","width","height","mainView","opponentUserName","opponentSocketId"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport Peer from \"simple-peer\";\nimport styled from \"styled-components\";\nconst socket  = require('../connection/socket').socket\n\n\nconst Container = styled.div`\n  height: 50vh;\n  width: 100%;\n  flex-direction: column;\n`;\n\nconst Row = styled.div`\n  width: 100%;\n`;\n\nconst Video = styled.video`\n  border: 1px solid blue;\n`;\n\nfunction VideoChatApp(props) {\n  /**\n   * initial state: both player is neutral and have the option to call each other\n   * \n   * player 1 calls player 2: Player 1 should display: 'Calling {player 2 username},' and the \n   *                          'CallPeer' button should disappear for Player 1.\n   *                          Player 2 should display '{player 1 username} is calling you' and\n   *                          the 'CallPeer' button for Player 2 should also disappear. \n   * \n   * Case 1: player 2 accepts call - the video chat begins and there is no button to end it.\n   * \n   * Case 2: player 2 ignores player 1 call - nothing happens. Wait until the connection times out. \n   * \n   */\n\n  const [stream, setStream] = useState();\n  const [receivingCall, setReceivingCall] = useState(false);\n  const [caller, setCaller] = useState(\"\");\n  const [callerSignal, setCallerSignal] = useState();\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [isCalling, setIsCalling] = useState(false)\n  const userVideo = useRef();\n  const partnerVideo = useRef();\n\n  // iceServer with STUN and TURN Config\n  const server = [{ urls: 'stun:stun.l.google.com:19302' },\n                  { urls: 'stun:global.stun.twilio.com:3478?transport=udp' },\n                  { urls: 'turn:numb.viagenie.ca',\n                    username: \"pasaseh@ether123.net\",\n                    credential: \"12345678\"  \n                }\n                ]\n\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then(stream => {\n      setStream(stream);\n      if (userVideo.current) {\n        userVideo.current.srcObject = stream;\n      }\n    })\n\n    socket.on(\"hey\", (data) => {\n      setReceivingCall(true);\n      setCaller(data.from);\n      setCallerSignal(data.signal);\n    })\n  }, []);\n\n  function callPeer(id) {\n    setIsCalling(true)\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream: stream,\n      \n    });\n\n    peer.on(\"signal\", data => {\n      socket.emit(\"callUser\", { userToCall: id, signalData: data, from: props.mySocketId})\n    })\n\n    peer.on(\"stream\", stream => {\n      if (partnerVideo.current) {\n        partnerVideo.current.srcObject = stream;\n      }\n    });\n\n    socket.on(\"callAccepted\", signal => {\n      setCallAccepted(true);\n      peer.signal(signal);\n    })\n\n  }\n\n  function acceptCall() {\n    setCallAccepted(true);\n    setIsCalling(false)\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream: stream,\n    });\n    peer.on(\"signal\", data => {\n      socket.emit(\"acceptCall\", { signal: data, to: caller })\n    })\n\n    peer.on(\"stream\", stream => {\n      partnerVideo.current.srcObject = stream;\n    });\n\n    peer.signal(callerSignal);\n  }\n\n  let UserVideo;\n  if (stream) {\n    UserVideo = (\n      <Video playsInline muted ref={userVideo} autoPlay style = {{width: \"50%\", height: \"50%\"}} />\n    );\n  }\n\n  let mainView;\n\n  if (callAccepted) {\n    mainView = (\n      <Video playsInline ref={partnerVideo} autoPlay style = {{width: \"50%\", height: \"50%\"}} />\n    );\n  } else if (receivingCall) {\n    mainView = (\n      <div>\n        <h1>{props.opponentUserName} is calling you</h1>\n        <button onClick={acceptCall}><h1>Accept</h1></button>\n      </div>\n    )\n  } else if (isCalling) {\n    mainView = (\n      <div>\n        <h1>Currently calling {props.opponentUserName}...</h1>\n      </div>\n    )\n  } else {\n    mainView = (\n      <button onClick = {() => {\n        callPeer(props.opponentSocketId)\n      }}><h1>Chat with your friend while you play!</h1></button>\n    )\n  }\n\n\n\n  return (<Container>\n      <Row>\n        {mainView}\n        {UserVideo}\n      </Row>\n    </Container>);\n}\n\nexport default VideoChatApp;\n"]},"metadata":{},"sourceType":"module"}