{"ast":null,"code":"class Square {\n  constructor(x, y, pieceOnThisSquare, canvasCoord) {\n    this.x = x; // Int 0 < x < 7\n\n    this.y = y; // Int 0 < y < 7 \n\n    this.canvasCoord = canvasCoord;\n    this.pieceOnThisSquare = pieceOnThisSquare; // ChessPiece || null\n  }\n\n  setPiece(newPiece) {\n    if (newPiece === null && this.pieceOnThisSquare === null) {\n      return;\n    } else if (newPiece === null) {\n      // case where the function caller wants to remove the piece that is on this square. \n      this.pieceOnThisSquare.setSquare(undefined);\n      this.pieceOnThisSquare = null;\n    } else if (this.pieceOnThisSquare === null) {\n      // case where the function caller wants assign a new piece on this square\n      this.pieceOnThisSquare = newPiece;\n      newPiece.setSquare(this);\n    } else if (this.getPieceIdOnThisSquare() != newPiece.id && this.pieceOnThisSquare.color != newPiece.color) {\n      // case where the function caller wants to change the piece on this square. (only different color allowed)\n      console.log(\"capture!\");\n      this.pieceOnThisSquare = newPiece;\n      newPiece.setSquare(this);\n    } else {\n      return \"user tried to capture their own piece\";\n    }\n  }\n\n  removePiece() {\n    this.pieceOnThisSquare = null;\n  }\n\n  getPiece() {\n    return this.pieceOnThisSquare;\n  }\n\n  getPieceIdOnThisSquare() {\n    if (this.pieceOnThisSquare === null) {\n      return \"empty\";\n    }\n\n    return this.pieceOnThisSquare.id;\n  }\n\n  isOccupied() {\n    return this.pieceOnThisSquare != null;\n  }\n\n  getCoord() {\n    return [this.x, this.y];\n  }\n\n  getCanvasCoord() {\n    return this.canvasCoord;\n  }\n\n}\n\nexport default Square;","map":{"version":3,"sources":["/home/arihant/Documents/Chess-Online/Chess-Frontend/src/chess/model/square.js"],"names":["Square","constructor","x","y","pieceOnThisSquare","canvasCoord","setPiece","newPiece","setSquare","undefined","getPieceIdOnThisSquare","id","color","console","log","removePiece","getPiece","isOccupied","getCoord","getCanvasCoord"],"mappings":"AAAA,MAAMA,MAAN,CAAa;AACTC,EAAAA,WAAW,CAACC,CAAD,EAAIC,CAAJ,EAAOC,iBAAP,EAA0BC,WAA1B,EAAuC;AAC9C,SAAKH,CAAL,GAASA,CAAT,CAD8C,CACnC;;AACX,SAAKC,CAAL,GAASA,CAAT,CAF8C,CAEnC;;AACX,SAAKE,WAAL,GAAmBA,WAAnB;AACA,SAAKD,iBAAL,GAAyBA,iBAAzB,CAJ8C,CAIH;AAC9C;;AAEDE,EAAAA,QAAQ,CAACC,QAAD,EAAW;AACf,QAAIA,QAAQ,KAAK,IAAb,IAAqB,KAAKH,iBAAL,KAA2B,IAApD,EAA0D;AACtD;AACH,KAFD,MAEO,IAAIG,QAAQ,KAAK,IAAjB,EAAuB;AAC1B;AACA,WAAKH,iBAAL,CAAuBI,SAAvB,CAAiCC,SAAjC;AACA,WAAKL,iBAAL,GAAyB,IAAzB;AACH,KAJM,MAIA,IAAI,KAAKA,iBAAL,KAA2B,IAA/B,EAAqC;AACxC;AACA,WAAKA,iBAAL,GAAyBG,QAAzB;AACAA,MAAAA,QAAQ,CAACC,SAAT,CAAmB,IAAnB;AACH,KAJM,MAIA,IAAI,KAAKE,sBAAL,MAAiCH,QAAQ,CAACI,EAA1C,IAAgD,KAAKP,iBAAL,CAAuBQ,KAAvB,IAAgCL,QAAQ,CAACK,KAA7F,EAAoG;AACvG;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,WAAKV,iBAAL,GAAyBG,QAAzB;AACAA,MAAAA,QAAQ,CAACC,SAAT,CAAmB,IAAnB;AACH,KALM,MAKA;AACH,aAAO,uCAAP;AACH;AACJ;;AAEDO,EAAAA,WAAW,GAAG;AACV,SAAKX,iBAAL,GAAyB,IAAzB;AACH;;AAEDY,EAAAA,QAAQ,GAAG;AACP,WAAO,KAAKZ,iBAAZ;AACH;;AAEDM,EAAAA,sBAAsB,GAAG;AACrB,QAAI,KAAKN,iBAAL,KAA2B,IAA/B,EAAqC;AACjC,aAAO,OAAP;AACH;;AACD,WAAO,KAAKA,iBAAL,CAAuBO,EAA9B;AACH;;AAEDM,EAAAA,UAAU,GAAG;AACT,WAAO,KAAKb,iBAAL,IAA0B,IAAjC;AACH;;AAEDc,EAAAA,QAAQ,GAAG;AACP,WAAO,CAAC,KAAKhB,CAAN,EAAS,KAAKC,CAAd,CAAP;AACH;;AAEDgB,EAAAA,cAAc,GAAG;AACb,WAAO,KAAKd,WAAZ;AACH;;AAtDQ;;AAyDb,eAAeL,MAAf","sourcesContent":["class Square {\n    constructor(x, y, pieceOnThisSquare, canvasCoord) {\n        this.x = x // Int 0 < x < 7\n        this.y = y // Int 0 < y < 7 \n        this.canvasCoord = canvasCoord\n        this.pieceOnThisSquare = pieceOnThisSquare // ChessPiece || null\n    }\n\n    setPiece(newPiece) {\n        if (newPiece === null && this.pieceOnThisSquare === null) {\n            return\n        } else if (newPiece === null) {\n            // case where the function caller wants to remove the piece that is on this square. \n            this.pieceOnThisSquare.setSquare(undefined)\n            this.pieceOnThisSquare = null\n        } else if (this.pieceOnThisSquare === null) {\n            // case where the function caller wants assign a new piece on this square\n            this.pieceOnThisSquare = newPiece\n            newPiece.setSquare(this)\n        } else if (this.getPieceIdOnThisSquare() != newPiece.id && this.pieceOnThisSquare.color != newPiece.color) {\n            // case where the function caller wants to change the piece on this square. (only different color allowed)\n            console.log(\"capture!\")\n            this.pieceOnThisSquare = newPiece\n            newPiece.setSquare(this)\n        } else {\n            return \"user tried to capture their own piece\"\n        }\n    }\n\n    removePiece() {\n        this.pieceOnThisSquare = null\n    }\n\n    getPiece() {\n        return this.pieceOnThisSquare \n    }\n\n    getPieceIdOnThisSquare() {\n        if (this.pieceOnThisSquare === null) {\n            return \"empty\"\n        }\n        return this.pieceOnThisSquare.id\n    }\n\n    isOccupied() {\n        return this.pieceOnThisSquare != null\n    }\n\n    getCoord() {\n        return [this.x, this.y]\n    }\n\n    getCanvasCoord() {\n        return this.canvasCoord\n    }\n}\n\nexport default Square"]},"metadata":{},"sourceType":"module"}