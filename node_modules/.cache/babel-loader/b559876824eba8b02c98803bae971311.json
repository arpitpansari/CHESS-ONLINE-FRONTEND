{"ast":null,"code":"var _jsxFileName = \"/home/arihant/Documents/Chess-Online/Chess-Frontend/src/chess/ui/chessgame.js\";\nimport React from 'react';\nimport Game from '../model/chess';\nimport Square from '../model/square';\nimport { Stage, Layer } from 'react-konva';\nimport Board from '../assets/chessBoard.png';\nimport useSound from 'use-sound';\nimport chessMove from '../assets/moveSoundEffect.mp3';\nimport Piece from './piece';\nimport piecemap from './piecemap';\nimport { useParams } from 'react-router-dom';\nimport { ColorContext } from '../../context/colorcontext';\nimport VideoChatApp from '../../connection/videochat';\n\nconst socket = require('../../connection/socket').socket;\n\nclass ChessGame extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      gameState: new Game(this.props.color),\n      draggedPieceTargetId: \"\",\n      // empty string means no piece is being dragged\n      playerTurnToMoveIsWhite: true,\n      whiteKingInCheck: false,\n      blackKingInCheck: false\n    };\n\n    this.startDragging = e => {\n      this.setState({\n        draggedPieceTargetId: e.target.attrs.id\n      });\n    };\n\n    this.movePiece = (selectedId, finalPosition, currentGame, isMyMove) => {\n      /**\n       * \"update\" is the connection between the model and the UI. \n       * This could also be an HTTP request and the \"update\" could be the server response.\n       * (model is hosted on the server instead of the browser)\n       */\n      var whiteKingInCheck = false;\n      var blackKingInCheck = false;\n      var blackCheckmated = false;\n      var whiteCheckmated = false;\n      const update = currentGame.movePiece(selectedId, finalPosition, isMyMove);\n\n      if (update === \"moved in the same position.\") {\n        this.revertToPreviousState(selectedId); // pass in selected ID to identify the piece that messed up\n\n        return;\n      } else if (update === \"user tried to capture their own piece\") {\n        this.revertToPreviousState(selectedId);\n        return;\n      } else if (update === \"b is in check\" || update === \"w is in check\") {\n        // change the fill of the enemy king or your king based on which side is in check. \n        // play a sound or something\n        if (update[0] === \"b\") {\n          blackKingInCheck = true;\n        } else {\n          whiteKingInCheck = true;\n        }\n      } else if (update === \"b has been checkmated\" || update === \"w has been checkmated\") {\n        if (update[0] === \"b\") {\n          blackCheckmated = true;\n        } else {\n          whiteCheckmated = true;\n        }\n      } else if (update === \"invalid move\") {\n        this.revertToPreviousState(selectedId);\n        return;\n      } // let the server and the other client know your move\n\n\n      if (isMyMove) {\n        socket.emit('new move', {\n          nextPlayerColorToMove: !this.state.gameState.thisPlayersColorIsWhite,\n          playerColorThatJustMovedIsWhite: this.state.gameState.thisPlayersColorIsWhite,\n          selectedId: selectedId,\n          finalPosition: finalPosition,\n          gameId: this.props.gameId\n        });\n      }\n\n      this.props.playAudio(); // sets the new game state. \n\n      this.setState({\n        draggedPieceTargetId: \"\",\n        gameState: currentGame,\n        playerTurnToMoveIsWhite: !this.props.color,\n        whiteKingInCheck: whiteKingInCheck,\n        blackKingInCheck: blackKingInCheck\n      });\n\n      if (blackCheckmated) {\n        alert(\"WHITE WON BY CHECKMATE!\");\n      } else if (whiteCheckmated) {\n        alert(\"BLACK WON BY CHECKMATE!\");\n      }\n    };\n\n    this.endDragging = e => {\n      const currentGame = this.state.gameState;\n      const currentBoard = currentGame.getBoard();\n      const finalPosition = this.inferCoord(e.target.x() + 90, e.target.y() + 90, currentBoard);\n      const selectedId = this.state.draggedPieceTargetId;\n      this.movePiece(selectedId, finalPosition, currentGame, true);\n    };\n\n    this.revertToPreviousState = selectedId => {\n      /**\n       * Should update the UI to what the board looked like before. \n       */\n      const oldGS = this.state.gameState;\n      const oldBoard = oldGS.getBoard();\n      const tmpGS = new Game(true);\n      const tmpBoard = [];\n\n      for (var i = 0; i < 8; i++) {\n        tmpBoard.push([]);\n\n        for (var j = 0; j < 8; j++) {\n          if (oldBoard[i][j].getPieceIdOnThisSquare() === selectedId) {\n            tmpBoard[i].push(new Square(j, i, null, oldBoard[i][j].canvasCoord));\n          } else {\n            tmpBoard[i].push(oldBoard[i][j]);\n          }\n        }\n      } // temporarily remove the piece that was just moved\n\n\n      tmpGS.setBoard(tmpBoard);\n      this.setState({\n        gameState: tmpGS,\n        draggedPieceTargetId: \"\"\n      });\n      this.setState({\n        gameState: oldGS\n      });\n    };\n\n    this.inferCoord = (x, y, chessBoard) => {\n      // console.log(\"actual mouse coordinates: \" + x + \", \" + y)\n\n      /*\n          Should give the closest estimate for new position. \n      */\n      var hashmap = {};\n      var shortestDistance = Infinity;\n\n      for (var i = 0; i < 8; i++) {\n        for (var j = 0; j < 8; j++) {\n          const canvasCoord = chessBoard[i][j].getCanvasCoord(); // calculate distance\n\n          const delta_x = canvasCoord[0] - x;\n          const delta_y = canvasCoord[1] - y;\n          const newDistance = Math.sqrt(delta_x ** 2 + delta_y ** 2);\n          hashmap[newDistance] = canvasCoord;\n\n          if (newDistance < shortestDistance) {\n            shortestDistance = newDistance;\n          }\n        }\n      }\n\n      return hashmap[shortestDistance];\n    };\n  }\n\n  componentDidMount() {\n    console.log(this.props.myUserName);\n    console.log(this.props.opponentUserName); // register event listeners\n\n    socket.on('opponent move', move => {\n      // move == [pieceId, finalPosition]\n      // console.log(\"opponenet's move: \" + move.selectedId + \", \" + move.finalPosition)\n      if (move.playerColorThatJustMovedIsWhite !== this.props.color) {\n        this.movePiece(move.selectedId, move.finalPosition, this.state.gameState, false);\n        this.setState({\n          playerTurnToMoveIsWhite: !move.playerColorThatJustMovedIsWhite\n        });\n      }\n    });\n  }\n\n  render() {\n    // console.log(this.state.gameState.getBoard())\n    //  console.log(\"it's white's move this time: \" + this.state.playerTurnToMoveIsWhite)\n\n    /*\n        Look at the current game state in the model and populate the UI accordingly\n    */\n    // console.log(this.state.gameState.getBoard())\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        backgroundImage: `url(${Board})`,\n        width: \"720px\",\n        height: \"720px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Stage, {\n      width: 720,\n      height: 720,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Layer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }\n    }, this.state.gameState.getBoard().map(row => {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 33\n        }\n      }, row.map(square => {\n        if (square.isOccupied()) {\n          return /*#__PURE__*/React.createElement(Piece, {\n            x: square.getCanvasCoord()[0],\n            y: square.getCanvasCoord()[1],\n            imgurls: piecemap[square.getPiece().name],\n            isWhite: square.getPiece().color === \"white\",\n            draggedPieceTargetId: this.state.draggedPieceTargetId,\n            onDragStart: this.startDragging,\n            onDragEnd: this.endDragging,\n            id: square.getPieceIdOnThisSquare(),\n            thisPlayersColorIsWhite: this.props.color,\n            playerTurnToMoveIsWhite: this.state.playerTurnToMoveIsWhite,\n            whiteKingInCheck: this.state.whiteKingInCheck,\n            blackKingInCheck: this.state.blackKingInCheck,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 45\n            }\n          });\n        }\n\n        return;\n      }));\n    })))));\n  }\n\n}\n\nconst ChessGameWrapper = props => {\n  /**\n   * player 1\n   *      - socketId 1\n   *      - socketId 2 ???\n   * player 2\n   *      - socketId 2\n   *      - socketId 1\n   */\n  // get the gameId from the URL here and pass it to the chessGame component as a prop. \n  const domainName = 'http://local';\n  const color = React.useContext(ColorContext);\n  const {\n    gameid\n  } = useParams();\n  const [play] = useSound(chessMove);\n  const [opponentSocketId, setOpponentSocketId] = React.useState('');\n  const [opponentDidJoinTheGame, didJoinGame] = React.useState(false);\n  const [opponentUserName, setUserName] = React.useState('');\n  const [gameSessionDoesNotExist, doesntExist] = React.useState(false);\n  React.useEffect(() => {\n    socket.on(\"playerJoinedRoom\", statusUpdate => {\n      console.log(\"A new player has joined the room! Username: \" + statusUpdate.userName + \", Game id: \" + statusUpdate.gameId + \" Socket id: \" + statusUpdate.mySocketId);\n\n      if (socket.id !== statusUpdate.mySocketId) {\n        setOpponentSocketId(statusUpdate.mySocketId);\n      }\n    });\n    socket.on(\"status\", statusUpdate => {\n      console.log(statusUpdate);\n      alert(statusUpdate);\n\n      if (statusUpdate === 'This game session does not exist.' || statusUpdate === 'There are already 2 people playing in this room.') {\n        doesntExist(true);\n      }\n    });\n    socket.on('start game', opponentUserName => {\n      console.log(\"START!\");\n\n      if (opponentUserName !== props.myUserName) {\n        setUserName(opponentUserName);\n        didJoinGame(true);\n      } else {\n        // in chessGame, pass opponentUserName as a prop and label it as the enemy. \n        // in chessGame, use reactContext to get your own userName\n        // socket.emit('myUserName')\n        socket.emit('request username', gameid);\n      }\n    });\n    socket.on('give userName', socketId => {\n      if (socket.id !== socketId) {\n        console.log(\"give userName stage: \" + props.myUserName);\n        socket.emit('recieved userName', {\n          userName: props.myUserName,\n          gameId: gameid\n        });\n      }\n    });\n    socket.on('get Opponent UserName', data => {\n      if (socket.id !== data.socketId) {\n        setUserName(data.userName);\n        console.log('data.socketId: data.socketId');\n        setOpponentSocketId(data.socketId);\n        didJoinGame(true);\n      }\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }\n  }, opponentDidJoinTheGame ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 13\n    }\n  }, \" Opponent: \", opponentUserName, \" \"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ChessGame, {\n    playAudio: play,\n    gameId: gameid,\n    color: color.didRedirect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(VideoChatApp, {\n    mySocketId: socket.id,\n    opponentSocketId: opponentSocketId,\n    myUserName: props.myUserName,\n    opponentUserName: opponentUserName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 13\n    }\n  }, \" You: \", props.myUserName, \" \")) : gameSessionDoesNotExist ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    style: {\n      textAlign: \"center\",\n      marginTop: \"200px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 13\n    }\n  }, \" :( \")) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    style: {\n      textAlign: \"center\",\n      marginTop: String(window.innerHeight / 8) + \"px\",\n      fontFamily: \"Stick\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 13\n    }\n  }, \"Hey \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 19\n    }\n  }, props.myUserName), \", copy and paste the URL below to send to your friend:\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    style: {\n      marginLeft: String(window.innerWidth / 2 - 290) + \"px\",\n      marginTop: \"30\" + \"px\",\n      width: \"580px\",\n      height: \"30px\"\n    },\n    onFocus: event => {\n      console.log('sd');\n      event.target.select();\n    },\n    value: domainName + \"/game/\" + gameid,\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    style: {\n      textAlign: \"center\",\n      marginTop: \"100px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 13\n    }\n  }, \" \", \"Waiting for other opponent to join the game...\", \" \")));\n};\n\nexport default ChessGameWrapper;","map":{"version":3,"sources":["/home/arihant/Documents/Chess-Online/Chess-Frontend/src/chess/ui/chessgame.js"],"names":["React","Game","Square","Stage","Layer","Board","useSound","chessMove","Piece","piecemap","useParams","ColorContext","VideoChatApp","socket","require","ChessGame","Component","state","gameState","props","color","draggedPieceTargetId","playerTurnToMoveIsWhite","whiteKingInCheck","blackKingInCheck","startDragging","e","setState","target","attrs","id","movePiece","selectedId","finalPosition","currentGame","isMyMove","blackCheckmated","whiteCheckmated","update","revertToPreviousState","emit","nextPlayerColorToMove","thisPlayersColorIsWhite","playerColorThatJustMovedIsWhite","gameId","playAudio","alert","endDragging","currentBoard","getBoard","inferCoord","x","y","oldGS","oldBoard","tmpGS","tmpBoard","i","push","j","getPieceIdOnThisSquare","canvasCoord","setBoard","chessBoard","hashmap","shortestDistance","Infinity","getCanvasCoord","delta_x","delta_y","newDistance","Math","sqrt","componentDidMount","console","log","myUserName","opponentUserName","on","move","render","backgroundImage","width","height","map","row","square","isOccupied","getPiece","name","ChessGameWrapper","domainName","useContext","gameid","play","opponentSocketId","setOpponentSocketId","useState","opponentDidJoinTheGame","didJoinGame","setUserName","gameSessionDoesNotExist","doesntExist","useEffect","statusUpdate","userName","mySocketId","socketId","data","display","didRedirect","textAlign","marginTop","String","window","innerHeight","fontFamily","marginLeft","innerWidth","event","select"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Game from '../model/chess'\nimport Square from '../model/square'\nimport { Stage, Layer } from 'react-konva';\nimport Board from '../assets/chessBoard.png'\nimport useSound from 'use-sound'\nimport chessMove from '../assets/moveSoundEffect.mp3'\nimport Piece from './piece'\nimport piecemap from './piecemap'\nimport { useParams } from 'react-router-dom'\nimport { ColorContext } from '../../context/colorcontext' \nimport VideoChatApp from '../../connection/videochat'\nconst socket  = require('../../connection/socket').socket\n\n\nclass ChessGame extends React.Component {\n\n    state = {\n        gameState: new Game(this.props.color),\n        draggedPieceTargetId: \"\", // empty string means no piece is being dragged\n        playerTurnToMoveIsWhite: true,\n        whiteKingInCheck: false, \n        blackKingInCheck: false\n    }\n\n\n    componentDidMount() {\n        console.log(this.props.myUserName)\n        console.log(this.props.opponentUserName)\n        // register event listeners\n        socket.on('opponent move', move => {\n            // move == [pieceId, finalPosition]\n            // console.log(\"opponenet's move: \" + move.selectedId + \", \" + move.finalPosition)\n            if (move.playerColorThatJustMovedIsWhite !== this.props.color) {\n                this.movePiece(move.selectedId, move.finalPosition, this.state.gameState, false)\n                this.setState({\n                    playerTurnToMoveIsWhite: !move.playerColorThatJustMovedIsWhite\n                })\n            }\n        })\n    }\n\n    startDragging = (e) => {\n        this.setState({\n            draggedPieceTargetId: e.target.attrs.id\n        })\n    }\n\n\n    movePiece = (selectedId, finalPosition, currentGame, isMyMove) => {\n        /**\n         * \"update\" is the connection between the model and the UI. \n         * This could also be an HTTP request and the \"update\" could be the server response.\n         * (model is hosted on the server instead of the browser)\n         */\n        var whiteKingInCheck = false \n        var blackKingInCheck = false\n        var blackCheckmated = false \n        var whiteCheckmated = false\n        const update = currentGame.movePiece(selectedId, finalPosition, isMyMove)\n        \n        if (update === \"moved in the same position.\") {\n            this.revertToPreviousState(selectedId) // pass in selected ID to identify the piece that messed up\n            return\n        } else if (update === \"user tried to capture their own piece\") {\n            this.revertToPreviousState(selectedId) \n            return\n        } else if (update === \"b is in check\" || update === \"w is in check\") { \n            // change the fill of the enemy king or your king based on which side is in check. \n            // play a sound or something\n            if (update[0] === \"b\") {\n                blackKingInCheck = true\n            } else {\n                whiteKingInCheck = true\n            }\n        } else if (update === \"b has been checkmated\" || update === \"w has been checkmated\") { \n            if (update[0] === \"b\") {\n                blackCheckmated = true\n            } else {\n                whiteCheckmated = true\n            }\n        } else if (update === \"invalid move\") {\n            this.revertToPreviousState(selectedId) \n            return\n        } \n\n        // let the server and the other client know your move\n        if (isMyMove) {\n            socket.emit('new move', {\n                nextPlayerColorToMove: !this.state.gameState.thisPlayersColorIsWhite,\n                playerColorThatJustMovedIsWhite: this.state.gameState.thisPlayersColorIsWhite,\n                selectedId: selectedId, \n                finalPosition: finalPosition,\n                gameId: this.props.gameId\n            })\n        }\n        \n\n        this.props.playAudio()   \n        \n        // sets the new game state. \n        this.setState({\n            draggedPieceTargetId: \"\",\n            gameState: currentGame,\n            playerTurnToMoveIsWhite: !this.props.color,\n            whiteKingInCheck: whiteKingInCheck,\n            blackKingInCheck: blackKingInCheck\n        })\n\n        if (blackCheckmated) {\n            alert(\"WHITE WON BY CHECKMATE!\")\n        } else if (whiteCheckmated) {\n            alert(\"BLACK WON BY CHECKMATE!\")\n        }\n    }\n\n\n    endDragging = (e) => {\n        const currentGame = this.state.gameState\n        const currentBoard = currentGame.getBoard()\n        const finalPosition = this.inferCoord(e.target.x() + 90, e.target.y() + 90, currentBoard)\n        const selectedId = this.state.draggedPieceTargetId\n        this.movePiece(selectedId, finalPosition, currentGame, true)\n    }\n\n    revertToPreviousState = (selectedId) => {\n        /**\n         * Should update the UI to what the board looked like before. \n         */\n        const oldGS = this.state.gameState\n        const oldBoard = oldGS.getBoard()\n        const tmpGS = new Game(true)\n        const tmpBoard = []\n\n        for (var i = 0; i < 8; i++) {\n            tmpBoard.push([])\n            for (var j = 0; j < 8; j++) {\n                if (oldBoard[i][j].getPieceIdOnThisSquare() === selectedId) {\n                    tmpBoard[i].push(new Square(j, i, null, oldBoard[i][j].canvasCoord))\n                } else {\n                    tmpBoard[i].push(oldBoard[i][j])\n                }\n            }\n        }\n\n        // temporarily remove the piece that was just moved\n        tmpGS.setBoard(tmpBoard)\n\n        this.setState({\n            gameState: tmpGS,\n            draggedPieceTargetId: \"\",\n        })\n\n        this.setState({\n            gameState: oldGS,\n        })\n    }\n\n \n    inferCoord = (x, y, chessBoard) => {\n        // console.log(\"actual mouse coordinates: \" + x + \", \" + y)\n        /*\n            Should give the closest estimate for new position. \n        */\n        var hashmap = {}\n        var shortestDistance = Infinity\n        for (var i = 0; i < 8; i++) {\n            for (var j = 0; j < 8; j++) {\n                const canvasCoord = chessBoard[i][j].getCanvasCoord()\n                // calculate distance\n                const delta_x = canvasCoord[0] - x \n                const delta_y = canvasCoord[1] - y\n                const newDistance = Math.sqrt(delta_x**2 + delta_y**2)\n                hashmap[newDistance] = canvasCoord\n                if (newDistance < shortestDistance) {\n                    shortestDistance = newDistance\n                }\n            }\n        }\n\n        return hashmap[shortestDistance]\n    }\n   \n    render() {\n        // console.log(this.state.gameState.getBoard())\n       //  console.log(\"it's white's move this time: \" + this.state.playerTurnToMoveIsWhite)\n        /*\n            Look at the current game state in the model and populate the UI accordingly\n        */\n        // console.log(this.state.gameState.getBoard())\n        \n        return (\n        <React.Fragment>\n        <div style = {{\n            backgroundImage: `url(${Board})`,\n            width: \"720px\",\n            height: \"720px\"}}\n        >\n            <Stage width = {720} height = {720}>\n                <Layer>\n                {this.state.gameState.getBoard().map((row) => {\n                        return (<React.Fragment>\n                                {row.map((square) => {\n                                    if (square.isOccupied()) {                                    \n                                        return (\n                                            <Piece \n                                                x = {square.getCanvasCoord()[0]}\n                                                y = {square.getCanvasCoord()[1]} \n                                                imgurls = {piecemap[square.getPiece().name]}\n                                                isWhite = {square.getPiece().color === \"white\"}\n                                                draggedPieceTargetId = {this.state.draggedPieceTargetId}\n                                                onDragStart = {this.startDragging}\n                                                onDragEnd = {this.endDragging}\n                                                id = {square.getPieceIdOnThisSquare()}\n                                                thisPlayersColorIsWhite = {this.props.color}\n                                                playerTurnToMoveIsWhite = {this.state.playerTurnToMoveIsWhite}\n                                                whiteKingInCheck = {this.state.whiteKingInCheck}\n                                                blackKingInCheck = {this.state.blackKingInCheck}\n                                                />)\n                                    }\n                                    return\n                                })}\n                            </React.Fragment>)\n                    })}\n                </Layer>\n            </Stage>\n        </div>\n        </React.Fragment>)\n    }\n}\n\n\n\nconst ChessGameWrapper = (props) => {\n    /**\n     * player 1\n     *      - socketId 1\n     *      - socketId 2 ???\n     * player 2\n     *      - socketId 2\n     *      - socketId 1\n     */\n\n\n\n    // get the gameId from the URL here and pass it to the chessGame component as a prop. \n    const domainName = 'http://local'\n    const color = React.useContext(ColorContext)\n    const { gameid } = useParams()\n    const [play] = useSound(chessMove);\n    const [opponentSocketId, setOpponentSocketId] = React.useState('')\n    const [opponentDidJoinTheGame, didJoinGame] = React.useState(false)\n    const [opponentUserName, setUserName] = React.useState('')\n    const [gameSessionDoesNotExist, doesntExist] = React.useState(false)\n\n    React.useEffect(() => {\n        socket.on(\"playerJoinedRoom\", statusUpdate => {\n            console.log(\"A new player has joined the room! Username: \" + statusUpdate.userName + \", Game id: \" + statusUpdate.gameId + \" Socket id: \" + statusUpdate.mySocketId)\n            if (socket.id !== statusUpdate.mySocketId) {\n                setOpponentSocketId(statusUpdate.mySocketId)\n            }\n        })\n    \n        socket.on(\"status\", statusUpdate => {\n            console.log(statusUpdate)\n            alert(statusUpdate)\n            if (statusUpdate === 'This game session does not exist.' || statusUpdate === 'There are already 2 people playing in this room.') {\n                doesntExist(true)\n            }\n        })\n        \n    \n        socket.on('start game', (opponentUserName) => {\n            console.log(\"START!\")\n            if (opponentUserName !== props.myUserName) {\n                setUserName(opponentUserName)\n                didJoinGame(true) \n            } else {\n                // in chessGame, pass opponentUserName as a prop and label it as the enemy. \n                // in chessGame, use reactContext to get your own userName\n                // socket.emit('myUserName')\n                socket.emit('request username', gameid)\n            }\n        })\n    \n    \n        socket.on('give userName', (socketId) => {\n            if (socket.id !== socketId) {\n                console.log(\"give userName stage: \" + props.myUserName)\n                socket.emit('recieved userName', {userName: props.myUserName, gameId: gameid})\n            }\n        })\n    \n        socket.on('get Opponent UserName', (data) => {\n            if (socket.id !== data.socketId) {\n                setUserName(data.userName)\n                console.log('data.socketId: data.socketId')\n                setOpponentSocketId(data.socketId)\n                didJoinGame(true) \n            }\n        })\n    }, [])\n\n\n    return (\n      <React.Fragment>\n        {opponentDidJoinTheGame ? (\n          <div>\n            <h4> Opponent: {opponentUserName} </h4>\n            <div style={{ display: \"flex\" }}>\n              <ChessGame\n                playAudio={play}\n                gameId={gameid}\n                color={color.didRedirect}\n              />\n              <VideoChatApp\n                mySocketId={socket.id}\n                opponentSocketId={opponentSocketId}\n                myUserName={props.myUserName}\n                opponentUserName={opponentUserName}\n              />\n            </div>\n            <h4> You: {props.myUserName} </h4>\n          </div>\n        ) : gameSessionDoesNotExist ? (\n          <div>\n            <h1 style={{ textAlign: \"center\", marginTop: \"200px\" }}> :( </h1>\n          </div>\n        ) : (\n          <div>\n            <h1\n              style={{\n                textAlign: \"center\",\n                marginTop: String(window.innerHeight / 8) + \"px\",\n                fontFamily:\"Stick\"\n              }}\n            >\n              Hey <strong>{props.myUserName}</strong>, copy and paste the URL\n              below to send to your friend:\n            </h1>\n            <textarea\n              style={{ marginLeft: String((window.innerWidth / 2) - 290) + \"px\", marginTop: \"30\" + \"px\", width: \"580px\", height: \"30px\"}}\n              onFocus={(event) => {\n                  console.log('sd')\n                  event.target.select()\n              }}\n              value = {domainName + \"/game/\" + gameid}\n              type = \"text\">\n              </textarea>\n            <br></br>\n\n            <h1 style={{ textAlign: \"center\", marginTop: \"100px\" }}>\n              {\" \"}\n              Waiting for other opponent to join the game...{\" \"}\n            </h1>\n          </div>\n        )}\n      </React.Fragment>\n    );\n};\n\nexport default ChessGameWrapper"]},"metadata":{},"sourceType":"module"}