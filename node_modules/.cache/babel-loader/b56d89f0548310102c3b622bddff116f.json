{"ast":null,"code":"var _jsxFileName = \"/home/arihant/Documents/Chess-Online/Chess-Frontend/src/App.js\";\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\nimport JoinRoom from './onboard/joinroom';\nimport { ColorContext } from './context/colorcontext';\nimport Onboard from './onboard/onboard';\nimport JoinGame from './onboard/joingame';\nimport ChessGame from './chess/ui/chessgame';\n/*\n *  Frontend flow: \n * \n * 1. user first opens this app in the browser. \n * 2. a screen appears asking the user to send their friend their game URL to start the game.\n * 3. the user sends their friend their game URL\n * 4. the user clicks the 'start' button and waits for the other player to join. \n * 5. As soon as the other player joins, the game starts. \n * \n * \n * Other player flow:\n * 1. user gets the link sent by their friend\n * 2. user clicks on the link and it redirects to their game. If the 'host' has not yet \n *    clicked the 'start' button yet, the user will wait for when the host clicks the start button.  \n *    If the host decides to leave before they click on the \"start\" button, the user will be notified\n *    that the host has ended the session. \n * 3. Once the host clicks the start button or the start button was already clicked on\n *    before, that's when the game starts. \n * Onboarding screen =====> Game start. \n * \n * Every time a user opens our site from the '/' path, a new game instance is automatically created\n * on the back-end. We should generate the uuid on the frontend, send the request with the uuid\n * as a part of the body of the request. If any player leaves, then the other player wins automatically.  \n * \n */\n\nfunction App() {\n  const [didRedirect, setDidRedirect] = React.useState(false);\n  const playerDidRedirect = React.useCallback(() => {\n    setDidRedirect(true);\n  }, []);\n  const playerDidNotRedirect = React.useCallback(() => {\n    setDidRedirect(false);\n  }, []);\n  const [userName, setUserName] = React.useState('');\n  return /*#__PURE__*/React.createElement(ColorContext.Provider, {\n    value: {\n      didRedirect: didRedirect,\n      playerDidRedirect: playerDidRedirect,\n      playerDidNotRedirect: playerDidNotRedirect\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Router, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    path: \"/\",\n    exact: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Onboard, {\n    setUserName: setUserName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Route, {\n    path: \"/game/:gameid\",\n    exact: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }, didRedirect ? /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(JoinGame, {\n    userName: userName,\n    isCreator: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(ChessGame, {\n    myUserName: userName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 21\n    }\n  })) : /*#__PURE__*/React.createElement(JoinRoom, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/arihant/Documents/Chess-Online/Chess-Frontend/src/App.js"],"names":["React","BrowserRouter","Router","Route","Redirect","Switch","JoinRoom","ColorContext","Onboard","JoinGame","ChessGame","App","didRedirect","setDidRedirect","useState","playerDidRedirect","useCallback","playerDidNotRedirect","userName","setUserName"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,KAAlC,EAAyCC,QAAzC,EAAmDC,MAAnD,QAAiE,kBAAjE;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,SAASC,YAAT,QAA6B,wBAA7B;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,SAASC,GAAT,GAAe;AAEb,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCb,KAAK,CAACc,QAAN,CAAe,KAAf,CAAtC;AAEA,QAAMC,iBAAiB,GAAGf,KAAK,CAACgB,WAAN,CAAkB,MAAM;AAChDH,IAAAA,cAAc,CAAC,IAAD,CAAd;AACD,GAFyB,EAEvB,EAFuB,CAA1B;AAIA,QAAMI,oBAAoB,GAAGjB,KAAK,CAACgB,WAAN,CAAkB,MAAM;AACnDH,IAAAA,cAAc,CAAC,KAAD,CAAd;AACD,GAF4B,EAE1B,EAF0B,CAA7B;AAIA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BnB,KAAK,CAACc,QAAN,CAAe,EAAf,CAAhC;AAEA,sBACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAI;AAACF,MAAAA,WAAW,EAAEA,WAAd;AAA2BG,MAAAA,iBAAiB,EAAEA,iBAA9C;AAAiEE,MAAAA,oBAAoB,EAAEA;AAAvF,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAG,GAAd;AAAkB,IAAA,KAAK,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD;AAAS,IAAA,WAAW,EAAIE,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAIE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAG,eAAd;AAA8B,IAAA,KAAK,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGP,WAAW,gBACV,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACM,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAIM,QAAtB;AAAgC,IAAA,SAAS,EAAI,IAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADN,eAEM,oBAAC,SAAD;AAAW,IAAA,UAAU,EAAIA,QAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFN,CADU,gBAMV,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,CAJF,eAaE,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAG,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,CADF,CADF,CADF;AAoBD;;AAED,eAAeP,GAAf","sourcesContent":["import React from 'react';\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\nimport JoinRoom from './onboard/joinroom'\nimport { ColorContext } from './context/colorcontext'\nimport Onboard from './onboard/onboard'\nimport JoinGame from './onboard/joingame'\nimport ChessGame from './chess/ui/chessgame'\n/*\n *  Frontend flow: \n * \n * 1. user first opens this app in the browser. \n * 2. a screen appears asking the user to send their friend their game URL to start the game.\n * 3. the user sends their friend their game URL\n * 4. the user clicks the 'start' button and waits for the other player to join. \n * 5. As soon as the other player joins, the game starts. \n * \n * \n * Other player flow:\n * 1. user gets the link sent by their friend\n * 2. user clicks on the link and it redirects to their game. If the 'host' has not yet \n *    clicked the 'start' button yet, the user will wait for when the host clicks the start button.  \n *    If the host decides to leave before they click on the \"start\" button, the user will be notified\n *    that the host has ended the session. \n * 3. Once the host clicks the start button or the start button was already clicked on\n *    before, that's when the game starts. \n * Onboarding screen =====> Game start. \n * \n * Every time a user opens our site from the '/' path, a new game instance is automatically created\n * on the back-end. We should generate the uuid on the frontend, send the request with the uuid\n * as a part of the body of the request. If any player leaves, then the other player wins automatically.  \n * \n */\n\n\nfunction App() {\n\n  const [didRedirect, setDidRedirect] = React.useState(false)\n\n  const playerDidRedirect = React.useCallback(() => {\n    setDidRedirect(true)\n  }, [])\n\n  const playerDidNotRedirect = React.useCallback(() => {\n    setDidRedirect(false)\n  }, [])\n\n  const [userName, setUserName] = React.useState('')\n\n  return (\n    <ColorContext.Provider value = {{didRedirect: didRedirect, playerDidRedirect: playerDidRedirect, playerDidNotRedirect: playerDidNotRedirect}}>\n      <Router>\n        <Switch>\n          <Route path = \"/\" exact>\n            <Onboard setUserName = {setUserName}/>\n          </Route>\n          <Route path = \"/game/:gameid\" exact>\n            {didRedirect ? \n              <React.Fragment>\n                    <JoinGame userName = {userName} isCreator = {true} />\n                    <ChessGame myUserName = {userName} />\n              </React.Fragment> \n              :\n              <JoinRoom />}\n          </Route>\n          <Redirect to = \"/\" />\n        </Switch>\n      </Router>\n    </ColorContext.Provider>);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}